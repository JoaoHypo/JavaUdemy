By Hypo:

Construtor - Inicializador da classe que define a forma como deve ser instanciado e quais atributos devem ser passados.



This - é a forma de referênciar o paraêmtro dentro da propria classe, nesse caso pode ser utilizado para referênciar a classe como um todo, atributos ou métodos.



Sobrecarga - É a utilização de métodos com o mesmo nome, eles podem sobrepor o método em questão ou trabalhar em conjunto, desde que tenham mudanças em seus parâmetros estabelecidos, dessa forma com parâemtros diferentes e dentro das suas versões já definidas o programa vai identificar qual versao do método a ser utilizada.



Encapsulamento - É o princípio de ocultar as partes internas de um objeto e fornecer métodos públicos para acessar e modificar essas partes de forma controlada. Isso ajuda a proteger o estado do objeto e promove um design mais robusto e seguro.

Getters e Setter são os métodos que fazem parte do conceito encapsulamento, eles são os responsáveis por protegerem os atributos, sendo construídos em contexto que o programador determina a liberdade do método e resultado/return desejado.



Membros estáticos - São membros que provavelmente serão utilizados por mais de uma classe, de forma que os atritubos geralmente são uteis a mais de um contexto, e os métodos possuem uma lógica replicável para as outras classes. É comum estes membros serem de classes ou pacotes utilitários, justamente por servirem de ferramenta a mais de uma situação e atuarem em conjunto com mais de 1 classe.

Pensando em um programa de calculadora, as operações matemáticas podem ajudar tanto em uma calculadora de integrais, quanto em uma escalonadora de matrizes, nesse contexto o ideal seria criar o método soma como estático, podendo ser utilizado por outras classes, nesse exemplo, a calcuradora de integrais e também a classe calculadora de matrizes escalonadas.



Modificadores de acesso - São os termos ou também ausência de um, ao declararmos os membros das classes em java que determina quais classes poderão acessar seu conteúdo, variando entre pacotes, subclasses e modulos.


Tipos referência vs tipo valor -
Tipos referência são tipos class, e tipos valor sãos os tipos primitivos do java.

String pool -
String pool é pra onde vão os objetos de string, dentro da memoria HEAP, e caso seja instanciado um Objeto NEW string, ele é instanciado na pool e também fora da pool, ambos na heap.

Boxing, unboxing, wrapper -

Boxing é converter um valor de variavel na stack e objetificar ele, instanciar na heap em uma box de memória.

Unboxing é atribuir um valor de algum atributo de um objeto, que está na heap e criar sua isntância na stack, em forma de variavel de tipo primitivo, tipo referência.

Wrapper é o ato de utilizar as classes referência, que são as classes dos tipos primitivos para armazenar os valores dos tipos primitivos, a principal vantagem é que por se tratar de um objeto, podemos ter atributos null.


List - Lists são interfaces e portanto não podem ser instânciadas, logo precisam de classes complementares, que utilizam da interface List para conseguir instânciar os objetos.

Listas iniciam vazias.

De vantagens temos que seu valor pode variar, é dinâmico, porém isso têm 1 custo de processamento, a medida que ela for crescendo unica forma de consultar algum de seus elementos é iterando sequêncialmente.
--------------------------------------------------------

By gepeto:

Construtor - Correto. O construtor é um método especial que inicializa os objetos de uma classe. Ele define como um objeto deve ser criado e quais atributos devem ser passados durante a instanciação.

This - Correto. A palavra-chave "this" em Java é usada para referenciar o objeto atual. Pode ser usado para referenciar a própria classe (this), atributos (this.atributo) ou métodos (this.metodo).

Sobrecarga - Correto. A sobrecarga de métodos ocorre quando há vários métodos com o mesmo nome em uma classe, mas com diferentes parâmetros. Os métodos sobrecarregados podem ter funcionalidades diferentes, desde que tenham assinaturas diferentes (parâmetros diferentes) para que o programa possa distinguir entre eles.

Encapsulamento - Correto. O encapsulamento é um princípio da programação orientada a objetos que consiste em ocultar os detalhes internos de uma classe e fornecer métodos públicos para acessar e modificar os atributos dessa classe. Os getters e setters são métodos utilizados para acessar e modificar os atributos encapsulados, permitindo um controle sobre o acesso aos mesmos.

Membros estáticos - Correto. Os membros estáticos (atributos e métodos) pertencem à classe em vez de pertencerem a instâncias individuais da classe. Eles podem ser acessados sem a necessidade de criar uma instância da classe e são compartilhados por todas as instâncias da classe. São úteis quando o valor ou a lógica do membro é independente do estado específico do objeto.

Modificadores de acesso - Correto. Os modificadores de acesso em Java são palavras-chave que especificam o nível de acesso aos membros (atributos, métodos, classes) de uma classe. Os principais modificadores de acesso são: public, private, protected e o padrão (sem especificação de modificador). Eles controlam a visibilidade e a acessibilidade dos membros em relação a outras classes e pacotes.

Tipos referência vs tipo valor:
Correto. Os tipos primitivos em Java são tipos de valor e armazenam diretamente o valor dos dados, enquanto os tipos de classe (ou objetos) são tipos referência e armazenam uma referência (endereço de memória) para o objeto na heap.

String pool:
Quase correto. O String pool é uma área especial na memória da JVM onde são armazenadas as strings literais (definidas diretamente no código). Quando você cria uma string literal, ela é verificada no pool, e se já existir uma string igual lá, o novo objeto referenciará a mesma instância (reaproveitando-a) em vez de criar uma nova. No entanto, ao criar uma string usando new String("exemplo"), ela não estará no pool; será criada uma nova instância no heap, mesmo que uma string igual já exista no pool.

Boxing, unboxing, wrapper:
Quase correto. Vamos ajustar a descrição:
Boxing: É o processo de converter um tipo primitivo em seu correspondente tipo de classe (wrapper). Por exemplo, converter um int em Integer ou um double em Double. O boxing ocorre automaticamente quando necessário, como quando você armazena um valor primitivo em uma coleção genérica.
Unboxing: É o processo oposto ao boxing, onde se converte um objeto wrapper para o tipo primitivo correspondente. O unboxing também ocorre automaticamente quando necessário, como quando você recupera um valor de uma coleção genérica.
Wrapper: São classes de objetos que representam os tipos primitivos em forma de objetos. Elas fornecem métodos e funcionalidades adicionais, como permitir o uso de tipos primitivos em coleções genéricas ou suportar valores nulos usando a classe wrapper (por exemplo, Integer pode ser nulo, mas int não pode).
